---
title: "STAT 331 Portfolio"
author: "Ian Cay"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be a B.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv
# Lab 3 Question 2
library(here)
teacher_evals <- read_csv(here::here("data", "teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
# Check-in 2.3 Question 5
agesxl <- read_xlsx(path = here::here("check-ins", 
                                      "2.1-loading-data", 
                                      "Ages_Data", 
                                      "ages.xlsx"
                                      ), 
                    sheet = "ages"
                    )
```

-   `txt`

```{r}
#| label: wd-1-txt
# Check-in 2.3 Question 3
ages_tab <- read_table(file = here::here("Week 2", 
                                          "Check-ins", 
                                         "Ages_Data", 
                                         "ages_tab.txt"
                                         ))
```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2
# Lab 3 Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(across(c(course_id,
                  question_no,
                  academic_degree, 
                  seniority, 
                  sex), 
                as.factor)) |>
  select(course_id, 
         teacher_id, 
         question_no, 
         no_participants, 
         resp_share, 
         SET_score_avg, 
         percent_failed_cur, 
         academic_degree, 
         seniority, 
         sex
         )
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(across(c(course_id,
                  question_no,
                  academic_degree, 
                  seniority, 
                  sex), 
                as.factor)) |>
  select(course_id, 
         teacher_id, 
         question_no, 
         no_participants, 
         resp_share, 
         SET_score_avg, 
         percent_failed_cur, 
         academic_degree, 
         seniority, 
         sex
         )
```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
# Lab 5 (Finding the Suspects)
suspects <- get_fit_now_member |>
  filter(str_starts(id, 
                    "48Z"), 
         str_detect(membership_status, 
                    "gold")) |>
  inner_join(
    get_fit_now_check_in |>
      filter(str_starts(membership_id, 
                        "48Z"), 
             ymd(check_in_date) == ymd(20180109)),
    by = c("id" = "membership_id"))

suspects <- suspects |>
  inner_join(person,
             by = c("person_id" = "id"))

suspects_drivers_license <- drivers_license |>
  filter(str_detect(plate_number,
                    "H42W"))

suspects <- suspects |>
  inner_join(suspects_drivers_license,
            by = c("license_id" = "id"))
suspects
```

-   factor

```{r}
#| label: wd-3-factor

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

```

-   `right_join()`

```{r}
#| label: wd-5-right

```

-   `inner_join()`

```{r}
#| label: wd-5-inner
# Lab 5 (Finding the Suspects)
suspects <- get_fit_now_member |>
  filter(str_starts(id, 
                    "48Z"), 
         str_detect(membership_status, 
                    "gold")) |>
  inner_join(
    get_fit_now_check_in |>
      filter(str_starts(membership_id, 
                        "48Z"), 
             ymd(check_in_date) == ymd(20180109)),
    by = c("id" = "membership_id"))

suspects <- suspects |>
  inner_join(person,
             by = c("person_id" = "id"))

suspects_drivers_license <- drivers_license |>
  filter(str_detect(plate_number,
                    "H42W"))

suspects <- suspects |>
  inner_join(suspects_drivers_license,
            by = c("license_id" = "id"))
suspects
```

-   `full_join()`

```{r}
#| label: wd-5-full

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
# Lab 4 Problem 6
ca_childcare_long <- ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "median_price"
  )

ca_childcare_long <- ca_childcare_long |>
  mutate(age_group = fct_relevel(age_group, 
                                 "mc_infant", 
                                 "mc_toddler", 
                                 "mc_preschool"))

ggplot(ca_childcare_long, aes(x = study_year, y = median_price, color = region)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "loess", se = FALSE) +
  facet_wrap(~ age_group, 
             labeller = as_labeller(c(
               "mc_infant" = "Infant",
               "mc_toddler" = "Toddler",
               "mc_preschool" = "Preschool"
             ))
  ) +
  theme_bw() +
  theme(legend.position = "right") +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  )
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
# Lab 4 Problem 4
income_summary <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = 'drop')

income_table <- income_summary |>
  pivot_wider(names_from = study_year, values_from = median_income, 
              names_prefix = "Year_") |>
  arrange(desc(Year_2018))

income_table |> 
  head(10)
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

-   `Lab 1`
-   `Lab 2`
-   `Lab 3`

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
# Lab 4 Question 7
ggplot(ca_childcare, 
       aes(x = mhi_2018, 
           y = mc_infant
           )
       ) +
  geom_point(alpha = 0.6, 
             color = "steelblue"
             ) + 
  geom_smooth(method = "lm", 
              se = TRUE, 
              color = "darkred", 
              linetype = "dashed"
              ) + 
  theme_bw() +
  labs(
    title = "Household Income vs. Infant Care Prices",
    x = "Median Household Income (dollars)",
    y = "",
    subtitle = "Median Weekly Price for Infant Care (dollars)"
  ) +
  theme(
    plot.title = element_text(hjust = 0, 
                              face = "bold") 
  )
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example

```

-   Example of function stops

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num

```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1
# Lab 4 Question 7
ggplot(ca_childcare, aes(x = mhi_2018, y = mc_infant)) +
  geom_point(alpha = 0.6, color = "steelblue") +  
  geom_smooth(method = "lm", se = TRUE, color = "darkred", linetype = "dashed") + 
  theme_bw() +
  labs(
    title = "Household Income vs. Infant Care Prices",
    x = "Median Household Income (dollars)",
    y = "",
    subtitle = "Median Weekly Price for Infant Care (dollars)"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold") 
  )
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1

```

-   I can use annotations

```{r}
#| label: dvs-3-2

```

-   I can be creative...

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1

```

-   Example 2

```{r}
#| label: dvs-6-2

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

```

-   Example 2

```{r}
#| label: dvs-7-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   `across()`

```{r}
#| label: pe-1-across
# Lab 3 Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(across(c(course_id,
                  question_no,
                  academic_degree, 
                  seniority, 
                  sex), 
                as.factor)) |>
  select(course_id, 
         teacher_id, 
         question_no, 
         no_participants, 
         resp_share, 
         SET_score_avg, 
         percent_failed_cur, 
         academic_degree, 
         seniority, 
         sex
         )
```

-   `map()` functions

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

```

**PE-3: I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
# Lab 1 Question 11
t.test(len ~ supp, data = ToothGrowth, 
       alternative = c("two.sided"), 
       var.equal = FALSE, 
       conf.level = 0.95)
```

-   Example 2

```{r}
#| label: dsm-2-2
# Lab 2 Question 17
species_mod <- aov(weight ~ species, 
                   data = surveys)

summary(species_mod)
```

## Revising My Thinking

<!-- I have revised my thinking throughout the course by consistently learning new functions that I was unaware of before revising my work through examples of other students' work. Afterwards, I was able to use those fuctions to revise my own code making it tidier, more efficient, and more robust. -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- I have completed most of the challenges  -->

## Peer Support & Collaboration

![](images/Screenshot%202024-11-03%20at%2011.46.46%E2%80%AFPM.png){width="195"}

<!-- At first, I was somewhat struggling with collaborating with my partners and staying within my role, but as I progressively got better as I got a better understanding of how to collaborate with my partner.   -->
